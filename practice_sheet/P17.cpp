#include<bits/stdc++.h>
using namespace std;
class Book {
private:
    char *title;
    int pages;
public:
    Book(const Book& b){
        title=new char[30];
    strcpy(title,b.title); this->pages=b.pages; }
    Book(const char *t, int p){strcpy(title,t),pages=p;}
    Book();
    Book(Book& b){
        strcpy(title,b.title);
        pages=b.pages;
    }
    void print(){cout<<title<<pages;}
// ...
// setter and getter methods omitted
};
int main(){
    Book b("ananan",880);
    b.print();
    Book a(b);
    a.print();
    return 0;
}
// the copy constructor provided by the compiler does what is called a shallow copy, meaning the copy constructor is pointing to the
// same block of data the object is, and if we are to make a change to the object the change will me seen also to the copy constructor 
//if it is generated by the compiler, 
//when we have an object which dynamically gets initialized at runtime, the defsult copy construcuctor copies this member with the adress of the dynamically allocated memory 
//and not the real adress of this memory ,now they are both pointing to the same adress of memory and changes to one will be reflected to the other.
//also when  deleting one there is  possibility for memory leak. 